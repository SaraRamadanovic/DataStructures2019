package stackAndQueue;
import linkedList.LinkedList;

@SuppressWarnings({"rawtypes", "unused", "unchecked"})
public class StackOfNodes<E> extends LinkedList<E> implements Stack<E>{
	private Node first;
	private linkedList.Node current;
	private int count = 0;
	private LinkedList<E> stack;
	
	public LinkedList<E> getStack() {
		return stack;
	}

	public StackOfNodes() {
		this.stack = new LinkedList<E>();
		this.count = 0;
	}
	
	@Override
	public E pop() {
		count --;
		return null;
	}
	
	@Override
	public void push(E value) {
		this.stack.addToRear(value);
	}
	
	/**
	 * Removes first element in stack
	 */
	@Override
	public void remove() {
		if (this.stack != null) {
			current = this.stack.getFirst();
			E next;
			E next1 = this.stack.getNext();
			current = null;
		}else {
			// TODO Throw exception when empty
		}
	}

	@Override
	public boolean isEmpty() {
		return this.stack.getFirst() == null;
	}

	@Override
	public int size() {
		return count;
	}
}
